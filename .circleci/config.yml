version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowID>>
            aws s3 rm s3://udapeople-<<parameters.WorkflowID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowID>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          when: on_fail
          name: Revert migrations
          command: |
            SUCCESS = $(curl --insecure  https://kvdb.io/BpxeYYpYGnYHD6esR9g6Sx/migration_<< parameters.workflowID >>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm update json5 --depth 3
            npm update loader-utils --depth 2
            npm update minimist --depth 4
            npm update js-yaml --depth 4
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 2
            npm update path-parse --depth 3
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > ~/project/.circleci/ansible/inventory.txt
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "Public IP: $BACKEND_IP"
            echo "$BACKEND_IP" >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 0f:04:5b:3c:4f:4d:b4:f5:0d:32:57:85:ee:af:db:72
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update && \
            sudo apt install software-properties-common && \
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            sudo apt install tar gzip awscli
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # - destroy_environment dont forget to pass argument
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/BpxeYYpYGnYHD6esR9g6Sx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install zip dependencies
          command: |
            sudo apt install tar gzip

      - run:
          name: Install Python3
          command: |
            sudo apt-get -y install python3-pip
            sudo apt-get -y install python3

      - run:
          name: Install aws & ansible
          command: |
            python3 -m pip install --user ansible
            python3 -m pip install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - 0f:04:5b:3c:4f:4d:b4:f5:0d:32:57:85:ee:af:db:72

      - attach_workspace:
          at: ~/

      - run:
          name: Install zip dependencies
          command: |
            sudo apt install tar gzip

      - run:
          name: Install Python3
          command: |
            sudo apt-get update -y
            sudo apt-get -y install python3-pip
            sudo apt-get -y install python3

      - run:
          name: Install aws & ansible
          command: |
            python3 -m pip install --user ansible
            python3 -m pip install awscli

      - run:
          name: Package backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/deploy/files/
            mv artifact.tar.gz ~/project/.circleci/ansible/deploy/files/

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: alpine:3.14
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl python3 py3-pip
            python3 -m pip install awscli
            python3 -m pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     - revert-migrations
  #     - destroy-environment

cleanup:
  docker:
    # Docker image here
  steps:
    - checkout
    - run:
        name: Get old stack workflow id
        command: |
          # your code here
          export OldWorkflowID="the id here"
          export STACKS=[] #put the list of stacks here
    - run:
        name: Remove old stacks and files
        command: |
          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          then
            # your code here
          fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - test-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
